#!/bin/bash

MASTER_URI=$1

run ()
{
  ./run_dcos_cmd $MASTER_URI "$1"
}

app_installed ()
{
  run "dcos package list $1"
}

app_up ()
{
  app=$(curl -s -L -X GET $MASTER_URI/service/marathon/v2/apps/$1)
  ./app_healthy "$app" $2 $3 $4 $5
  return_val=$?

  if [ $return_val == 0 ]; then
    echo "Application '$1' is UP"
  else
    echo "Application '$1' is DOWN"
  fi

  return $return_val
}

chronos_installed ()
{
  app_installed "chronos"
}

chronos_up ()
{
  app_up "chronos" 1 1 0 0
}

hdfs_installed ()
{
  app_installed "hdfs"
}

hdfs_up ()
{
  app_up "hdfs" 1 1 0 0
}

start_chronos ()
{
  chronos_installed
  c_installed=$?

  if [ $c_installed != 0 ]; then
    echo "Installing chronos"
    run "dcos package install --yes chronos"
  fi

 # Give chronos 120s to become healthy
 for i in `seq 1 20`;
 do
   chronos_up
   c_up=$?

   if [ $c_up == 0 ]; then
     return 0
   fi

   sleep 6
 done

 exit 1
}

start_hdfs ()
{
  hdfs_installed
  h_installed=$?

  if [ $h_installed != 0 ]; then
    echo "Installing hdfs"
    run "dcos package install --yes hdfs"
  fi

 # Give hdfs 180s to become healthy
 for i in `seq 1 30`;
 do
   hdfs_up
   h_up=$?

   if [ $h_up == 0 ]; then
     return 0
   fi

   sleep 6
 done

 exit 1
}


schedule_hdfs_test ()
{
  uuid=$(uuidgen)
  test_name=hdfs-mesos-test-$uuid
  echo "test_name = $test_name"
  echo "Scheduling the hdfs test on Chronos"
  curl -L -H 'Content-Type: application/json' -X POST -d '{ "schedule": "R1//PT2S", "name": "'"$test_name"'", "epsilon": "PT1M", "command": "export PATH=$MESOS_DIRECTORY/hdfs-mesos-0.1.2/bin:$PATH && hadoop fs -ls hdfs://hdfs/ && rm -rf hdfs-test && hadoop fs -rm -r -f hdfs://hdfs/hdfs-test && hadoop fs -mkdir hdfs://hdfs/hdfs-test && mkdir hdfs-test && echo \"this is a test\" > hdfs-test/test1.txt && hadoop fs -put hdfs-test/test1.txt hdfs://hdfs/hdfs-test && hadoop fs -get hdfs://hdfs/hdfs-test/test1.txt hdfs-test/test2.txt && rm -rf hdfs-test && hadoop fs -rm -r -f hdfs://hdfs/hdfs-test", "owner": "gabriel@mesosphere.io", "async": false, "uris": ["https://s3.amazonaws.com/downloads.mesosphere.io/hdfs/artifacts/dcos/0.1.2/hdfs-mesos-0.1.2.tgz"] }' $MASTER_URI/service/chronos/scheduler/iso8601

  if [ $? != 0  ]; then
    echo "Failed to schedule test."
    exit 3
  fi
}


get_chronos_jobs ()
{
  chronos_jobs=$(curl -s -L -X GET $MASTER_URI/service/chronos/scheduler/jobs)
}


# Main
start_chronos
start_hdfs
schedule_hdfs_test

# Sanity test should pass in 60s
for i in `seq 1 10`;
do
  get_chronos_jobs
  ./job_status "$test_name" "$chronos_jobs"
  job_result=$?

  if [ $job_result == 0 ]; then
    echo "Test PASSED."
    exit 0
  elif [ $job_result == 1 ]; then
    echo "Test FAILED."
    exit 1
  else 
    echo "Test not scheduled yet, retrying..."
    sleep 6
  fi
done

echo "Test not completed within 60s"
exit 4

